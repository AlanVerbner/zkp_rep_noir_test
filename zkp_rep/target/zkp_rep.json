{
  "noir_version": "0.30.0+af57471035e4fa7eaffa71693219df6d029dbcde",
  "hash": 16945413176741017911,
  "abi": {
    "parameters": [
      {
        "name": "root_address_bytes",
        "type": {
          "kind": "array",
          "length": 20,
          "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
        },
        "visibility": "public"
      },
      {
        "name": "profile_address_hash",
        "type": {
          "kind": "array",
          "length": 32,
          "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
        },
        "visibility": "public"
      },
      {
        "name": "profile_pub_key",
        "type": {
          "kind": "array",
          "length": 64,
          "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
        },
        "visibility": "private"
      },
      {
        "name": "sig_from_profile",
        "type": {
          "kind": "array",
          "length": 64,
          "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
        },
        "visibility": "private"
      }
    ],
    "param_witnesses": {
      "profile_address_hash": [{ "start": 20, "end": 52 }],
      "profile_pub_key": [{ "start": 52, "end": 116 }],
      "root_address_bytes": [{ "start": 0, "end": 20 }],
      "sig_from_profile": [{ "start": 116, "end": 180 }]
    },
    "return_type": null,
    "return_witnesses": [],
    "error_types": {}
  },
  "bytecode": "",
  "debug_symbols": "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xdqrWHsVa69i7VWsvYq1V7H2KtZexdqrWHsVa69i7VWsvYq1V7H2KtZexdqrWHsVa69i7VWsvYq1V7H2KtZexdqrWHsVa69i7VWsvYq1V7H2KtZexdqrWHsVa69i7VWsvYq1V7H2KtZexdqrWHsVa69i7VWsvYq1V7H2KtZexdqrWHsVa69i7VWsvYq1V7H2KtZexdqrWHsVa69m7dWsvZq1V7P2atZezdqrWXs1a69m7dWsvZq1V7P2atZezdqrWXs1a69m7dWsvZq1V7P2atZezdqrWXs1a69m7dWsvZq1V7P2atZezdqrWXs1a69m7dWsvZq1V7P2atZezdqrWXs1a69m7dWsvZq1V7P2atZezdqrWXs1a69m7dWsvZq1V7P2atZezdqrWXs1a69m7dWsvZq1V7P2atZezdqrWXs1a69m7dWsvZq1V7P2atZezdqrWXs1a69m7dWsvZq1V7P2atZezdqrWXs1a69m7dWsvZq1V7P2atZezdqrWXs1a69m7dWsvZq1V7P2atZezdqrWXs1a69m7dWsvZq1V7P2mqy9JmuvebW93n/wrxc/v3rx7Y8v394D73/vl9ffvXv15vXHD9/9+6fff+f+tf8B",
  "file_map": {
    "22": {
      "source": "mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n",
      "path": "std/field.nr"
    },
    "30": {
      "source": "mod hash;\nmod aes128;\nmod array;\nmod slice;\nmod merkle;\nmod schnorr;\nmod ecdsa_secp256k1;\nmod ecdsa_secp256r1;\nmod eddsa;\nmod embedded_curve_ops;\nmod sha256;\nmod sha512;\nmod field;\nmod ec;\nmod unsafe;\nmod collections;\nmod compat;\nmod convert;\nmod option;\nmod string;\nmod test;\nmod cmp;\nmod ops;\nmod default;\nmod prelude;\nmod uint128;\nmod bigint;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained pub fn print<T>(input: T) {\n    print_oracle(false, input);\n}\n\nunconstrained pub fn println<T>(input: T) {\n    print_oracle(true, input);\n}\n\n#[foreign(recursive_aggregation)]\npub fn verify_proof<N>(verification_key: [Field], proof: [Field], public_inputs: [Field], key_hash: Field) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n// from_field and as_field are private since they are not valid for every type.\n// `as` should be the default for users to cast between primitive types, and in the future\n// traits can be used to work with generic types.\n#[builtin(from_field)]\nfn from_field<T>(x: Field) -> T {}\n\n#[builtin(as_field)]\nfn as_field<T>(x: T) -> Field {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) + crate::as_field(y))\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T {\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    crate::from_field(crate::as_field(x) + 340282366920938463463374607431768211456 - crate::as_field(y))\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) * crate::as_field(y))\n}\n",
      "path": "std/lib.nr"
    },
    "46": {
      "source": "use dep::std;\nuse dep::ecrecover;\nuse dep::std::hash;\nuse ecrecover::secp256k1::PubKey;\n\ntype SignatureBytes = [u8; 64];\ntype PubKeyArray = [u8; 64];\n\nfn main(\n    root_address_bytes: pub [u8; 20],\n    profile_address_hash: pub [u8; 32],\n    profile_pub_key: PubKeyArray,\n    sig_from_profile: SignatureBytes\n) {\n    let profile_hashed_message: [u8; 32] = std::hash::keccak256(root_address_bytes, 20);\n    let profile_pub_key = PubKey::from_unified(profile_pub_key);\n    let recovered_profile_address = profile_pub_key.ecrecover(sig_from_profile, profile_hashed_message);\n    println(f\"Recovered profile address is {recovered_profile_address}\");\n    let profile_address_bytes: [u8; 20] = recovered_profile_address.to_be_bytes(20).as_array();\n    println(f\"Recovered profile address: {profile_address_bytes}\");\n    assert(std::hash::keccak256(profile_address_bytes, 20) == profile_address_hash);\n}\n\n#[test]\nfn test_main() {\n    let root_address_bytes = [132, 52, 228, 162, 131, 205, 220, 150, 37, 184, 231, 8, 8, 86, 54, 85, 60, 140, 228, 129];\n    let profile_address_hash = [\n        236, 107, 62, 218, 77, 169, 7, 124, 82, 243, 85, 245, 215, 170, 43, 18, 78, 120, 98, 107, 112, 89, 241, 117, 33, 30, 158, 119, 9, 133, 71, 202\n    ];\n    let profile_pub_key = [\n        180, 230, 20, 31, 225, 178, 219, 157, 64, 109, 85, 22, 202, 157, 173, 68, 176, 231, 26, 42, 110, 15, 9, 76, 86, 201, 71, 226, 102, 161, 33, 162, 1, 211, 214, 74, 208, 32, 133, 176, 172, 249, 240, 59, 118, 232, 80, 62, 52, 225, 176, 88, 105, 137, 1, 242, 173, 166, 195, 86, 84, 241, 251, 147\n    ];\n    let profile_signature = [\n        108, 220, 41, 182, 246, 228, 35, 240, 189, 194, 208, 43, 38, 76, 26, 198, 19, 139, 61, 107, 169, 63, 57, 54, 114, 114, 213, 66, 143, 195, 178, 10, 61, 184, 151, 91, 219, 191, 105, 174, 195, 60, 86, 240, 80, 158, 28, 68, 35, 237, 104, 28, 140, 190, 81, 78, 177, 16, 249, 173, 17, 158, 36, 62\n    ];\n    main(\n        root_address_bytes,\n        profile_address_hash,\n        profile_pub_key,\n        profile_signature\n    );\n}\n",
      "path": "/Users/alan.verbner/Projects/globant/zkp_rep_noir_test/zkp_rep/src/main.nr"
    },
    "48": {
      "source": "use dep::std;\n\nuse dep::array_helpers;\n\nstruct PubKey {\n    pub_x: [u8; 32],\n    pub_y: [u8; 32],\n}\n\nunconstrained\nfn split_uncompressed_pub_key(\n    pub_key: [u8; 65]\n) -> ([u8; 32], [u8; 32]) {\n    let mut pub_key_x: [u8; 32] = [0; 32];\n    let mut pub_key_y: [u8; 32] = [0; 32];\n\n    for i in 0..32 {\n        pub_key_x[i] = pub_key[i + 1];\n        pub_key_y[i] = pub_key[i + 32 + 1];\n    };\n\n    (pub_key_x, pub_key_y)\n}\n\nimpl PubKey {\n    fn from_xy(pub_x: [u8; 32], pub_y: [u8; 32]) -> PubKey {\n        PubKey {\n            pub_x,\n            pub_y,\n        }\n    }\n\n    fn from_unified(pub_key: [u8; 64]) -> PubKey {\n        let (key_x, key_y) = array_helpers::split_u8_64_unconstrained(pub_key);\n\n        PubKey {\n            pub_x: key_x,\n            pub_y: key_y,\n        }\n    }\n\n    fn from_uncompressed(pub_key: [u8; 65]) -> PubKey {\n        assert(pub_key[0] == 0x04);\n        let (key_x, key_y) = split_uncompressed_pub_key(pub_key);\n\n        PubKey {\n            pub_x: key_x,\n            pub_y: key_y,\n        }\n    }\n\n    fn verify_sig(self, signature: [u8; 64], hashed_message: [u8; 32]) -> bool {\n        std::ecdsa_secp256k1::verify_signature(self.pub_x, self.pub_y, signature, hashed_message)\n    }\n\n    fn to_eth_address(self) -> Field {\n        let pub_key = array_helpers::u8_32_to_u8_64_unconstrained(self.pub_x, self.pub_y);\n        let hashed_pub_key = std::hash::keccak256(pub_key, 64);\n\n        let mut addr: Field = 0;\n        for i in 0..20 {\n            // shift left by 8 and add the new value\n            addr = (addr * 256) + hashed_pub_key[i + 12] as Field;\n        }\n\n        addr\n    }\n\n    fn ecrecover(\n        self,\n        signature: [u8; 64],\n        hashed_message: [u8; 32]\n    ) -> Field {\n        assert(self.verify_sig(signature, hashed_message));\n\n        self.to_eth_address()\n    }\n}\n\n\n#[test]\nfn test_ecrecover_via_key() {\n    let pub_key_x = [131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223, 198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117];\n    let pub_key_y = [53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99, 12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165];\n    let signature = [57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82, 71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213, 80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23, 136, 75, 29, 177];\n    let hashed_message = [13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112, 68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102];\n\n    let key = PubKey::from_xy(pub_key_x, pub_key_y);\n    assert(key.ecrecover(signature, hashed_message) == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266);\n}\n",
      "path": "/Users/alan.verbner/Projects/globant/zkp_rep_noir_test/ecrecover-noir/src/secp256k1.nr"
    },
    "49": {
      "source": "use dep::std;\n\nfn u8_32s_to_u64_16(\n    arr_a: [u8; 32],\n    arr_b: [u8; 32],\n) -> [u64; 16] {\n    let mut combined_u64: [u64; 16] = [0; 16];\n    \n    for i in 0..4 {\n        let mut value: u64 = 0;\n        for j in 0..8 {\n            value |= (arr_a[i*8+j] as u64) << ((56 - j*8) as u8);\n        }\n         combined_u64[i] = value;\n    }\n    for i in 4..8 {\n        let mut value: u64 = 0;\n        for j in 0..8 {\n            value |= (arr_b[(i-4)*8+j] as u64) << ((56 - j*8) as u8);\n        }\n         combined_u64[i] = value;\n    }\n\n    combined_u64\n}\n\nunconstrained\nfn u8_32s_to_u64_16_unconstrained(\n    arr_a: [u8; 32],\n    arr_b: [u8; 32],\n) -> [u64; 16] {\n    let mut combined_u64: [u64; 16] = [0; 16];\n    \n    for i in 0..4 {\n        let mut value: u64 = 0;\n        for j in 0..8 {\n            value |= (arr_a[i*8+j] as u64) << ((56 - j*8) as u8);\n        }\n         combined_u64[i] = value;\n    }\n    for i in 4..8 {\n        let mut value: u64 = 0;\n        for j in 0..8 {\n            value |= (arr_b[(i-4)*8+j] as u64) << ((56 - j*8) as u8);\n        }\n         combined_u64[i] = value;\n    }\n\n    combined_u64\n}\n\n#[test]\nfn test_u8_32s_to_u64_16() {\n    let arr_a: [u8; 32] = [\n        131,24,83,91,84,16,93,74,122,174,96,192,143,196,95,150,135,24,27,79,223,198,37,189,26,117,63,167,57,127,237,117\n    ];\n    let arr_b: [u8; 32] = [\n        53,71,241,28,168,105,102,70,242,243,172,176,142,49,1,106,250,194,62,99,12,93,17,245,159,97,254,245,123,13,42,165\n    ];\n    let out = u8_32s_to_u64_16(arr_a, arr_b);\n\n    assert(out[0] == 9446391870127103306);\n    assert(out[1] == 8840109498736861078);\n    assert(out[2] == 9734560624431998397);\n    assert(out[3] == 1906500004718046581);\n    assert(out[4] == 3839302312743495238);\n    assert(out[5] == 17506526050819047786);\n    assert(out[6] == 18069073250093961717);\n    assert(out[7] == 11484740855056378533);\n    assert(out[8] == 0);\n    assert(out[9] == 0);\n    assert(out[10] == 0);\n    assert(out[11] == 0);\n    assert(out[12] == 0);\n    assert(out[13] == 0);\n    assert(out[14] == 0);\n    assert(out[15] == 0);\n    // the above output is the hex \"0x8318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed753547f11ca8696646f2f3acb08e31016afac23e630c5d11f59f61fef57b0d2aa5\"\n}\n\nfn u8_32_to_u8_64(\n    arr_a: [u8; 32],\n    arr_b: [u8; 32],\n) -> [u8; 64] {\n    let mut combined: [u8; 64] = [0; 64];\n\n    for i in 0..32 {\n        combined[i] = arr_a[i];\n    }\n    for i in 0..32 {\n        combined[i + 32] = arr_b[i];\n    }\n\n    combined\n}\n\nunconstrained\nfn u8_32_to_u8_64_unconstrained(\n    arr_a: [u8; 32],\n    arr_b: [u8; 32],\n) -> [u8; 64] {\n    let mut combined: [u8; 64] = [0; 64];\n\n    for i in 0..32 {\n        combined[i] = arr_a[i];\n    }\n    for i in 0..32 {\n        combined[i + 32] = arr_b[i];\n    }\n\n    combined\n}\n\n\nfn u64_4_to_u8_32(\n    array: [u64; 4]\n) -> [u8; 32] {\n    let mut output: [u8; 32] = [0; 32];\n    let mut output_index = 0;\n\n    for num_idx in 0..4 {\n        for bit_pos in 0..8 {\n            let shift_amount: u64 = 56 - (bit_pos * 8) as u64;\n            output[output_index] = ((array[num_idx] >> shift_amount as u8) & 255) as u8;\n            output_index += 1;\n        }\n    }\n\n    output\n}\n\nunconstrained\nfn u64_4_to_u8_32_unconstrained(\n    array: [u64; 4]\n) -> [u8; 32] {\n    let mut output: [u8; 32] = [0; 32];\n    let mut output_index = 0;\n\n    for num_idx in 0..4 {\n        for bit_pos in 0..8 {\n            let shift_amount: u64 = 56 - (bit_pos * 8) as u64;\n            output[output_index] = ((array[num_idx] >> shift_amount as u8) & 255) as u8;\n            output_index += 1;\n        }\n    }\n\n    output\n}\n\n#[test]\nfn test_u64_4_to_u8_32() {\n    let hash: [u64; 4] = [\n        999647796417551690,\n        8840109498736861078,\n        9734560624431998397,\n        1906500004718046581\n    ];\n \n    let arr_out = u64_4_to_u8_32(hash);\n\n    assert(arr_out[0] == 13);\n    assert(arr_out[1] == 223);\n    assert(arr_out[2] == 118);\n    assert(arr_out[3] == 95);\n    assert(arr_out[4] == 221);\n    assert(arr_out[5] == 248);\n    assert(arr_out[6] == 93);\n    assert(arr_out[7] == 74);\n    assert(arr_out[8] == 122);\n    assert(arr_out[9] == 174);\n    assert(arr_out[10] == 96);\n    assert(arr_out[11] == 192);\n    assert(arr_out[12] == 143);\n    assert(arr_out[13] == 196);\n    assert(arr_out[14] == 95);\n    assert(arr_out[15] == 150);\n    assert(arr_out[16] == 135);\n    assert(arr_out[17] == 24);\n    assert(arr_out[18] == 27);\n    assert(arr_out[19] == 79);\n    assert(arr_out[20] == 223);\n    assert(arr_out[21] == 198);\n    assert(arr_out[22] == 37);\n    assert(arr_out[23] == 189);\n    assert(arr_out[24] == 26);\n    assert(arr_out[25] == 117);\n    assert(arr_out[26] == 63);\n    assert(arr_out[27] == 167);\n    assert(arr_out[28] == 57);\n    assert(arr_out[29] == 127);\n    assert(arr_out[30] == 237);\n    assert(arr_out[31] == 117);\n}\n\n/// @dev this method is used to convert a u8 array to a u160 (which is not supported by Noir, so it's represented as a Field)\n/// @dev will throw on Field overflow\nfn u8_to_u160(\n    array: [u8]\n) -> Field {\n    let mut addr: Field = 0;\n\n    for i in 0..20 {\n        // only take the last 20 bytes of the hash\n        addr = (addr * 256) + (array[i] as Field);\n    }\n\n    addr\n}\n\nunconstrained\nfn u8_to_u160_unconstrained(\n    array: [u8]\n) -> Field {\n    let mut addr: Field = 0;\n\n    for i in 0..20 {\n        // only take the last 20 bytes of the hash\n        addr = (addr * 256) + (array[i] as Field);\n    }\n\n    addr\n}\n\nfn u8_to_eth_address(\n    array: [u8]\n) -> Field {\n    u8_to_u160(array)\n}\n\nunconstrained\nfn u8_to_eth_address_unconstrained(\n    array: [u8]\n) -> Field {\n    u8_to_u160(array)\n}\n\n#[test]\nfn test_u8_32_to_u160() {\n    // keccak hash of hardhat 0 address pub key (0xc1ffd3cfee2d9e5cd67643f8f39fd6e51aad88f6f4ce6ab8827279cfffb92266) as u8 array\n    let hashed_pub_key = [\n        193,255,211,207,238,45,158,92,214,118,67,248,243,159,214,229,26,173,136,246,244,206,106,184,130,114,121,207,255,185,34,102\n    ];\n\n    let mut right_20_bytes: [u8] = [0; 20];\n    for i in 0..20 {\n        right_20_bytes[i] = hashed_pub_key[i + 12];\n    }\n\n    let addr = u8_to_u160(right_20_bytes);\n    let addr_aliased = u8_to_eth_address(right_20_bytes);\n\n    assert(addr == addr_aliased);\n    assert(addr == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266); // hardhat address 0\n}\n\nfn split_u8_64(\n    arr: [u8; 64]\n) -> ([u8; 32], [u8; 32]) {\n    let mut arr_a: [u8; 32] = [0; 32];\n    let mut arr_b: [u8; 32] = [0; 32];\n\n    for i in 0..32 {\n        arr_a[i] = arr[i];\n        arr_b[i] = arr[i + 32];\n    };\n\n    (arr_a, arr_b)\n}\n\nunconstrained\nfn split_u8_64_unconstrained(\n    arr: [u8; 64]\n) -> ([u8; 32], [u8; 32]) {\n    let mut arr_a: [u8; 32] = [0; 32];\n    let mut arr_b: [u8; 32] = [0; 32];\n\n    for i in 0..32 {\n        arr_a[i] = arr[i];\n        arr_b[i] = arr[i + 32];\n    };\n\n    (arr_a, arr_b)\n}\n\n#[test]\nfn test_split_u8_64() {\n    let u8_64 = [\n        193,255,211,207,238,45,158,92,214,118,67,248,243,159,214,229,26,173,136,246,244,206,106,184,130,114,121,207,255,185,34,102,\n        193,255,211,207,238,45,158,92,214,118,67,248,243,159,214,229,26,173,136,246,244,206,106,184,130,114,121,207,255,185,34,102\n    ];\n\n    let (arr_a, arr_b) = split_u8_64(u8_64);\n\n    for i in 0..32 {\n        assert(arr_a[i] == u8_64[i]);\n        assert(arr_b[i] == u8_64[i + 32]);\n    }\n}\n",
      "path": "/Users/alan.verbner/Projects/globant/zkp_rep_noir_test/noir-array-helpers/src/lib.nr"
    }
  },
  "names": ["main"]
}
